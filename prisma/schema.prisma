// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model RequestThread {
    id        String               @id @default(cuid())
    title     String
    content   String
    authorId  String
    budget    Int
    author    User                 @relation(fields: [authorId], references: [id])
    replies   RequestThreadReply[]
    createdAt DateTime             @default(now())
    updatedAt DateTime             @updatedAt
}

model RequestThreadReply {
    id        String        @id @default(cuid())
    content   String
    authorId  String
    author    User          @relation(fields: [authorId], references: [id])
    threadId  String
    thread    RequestThread @relation(fields: [threadId], references: [id])
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

model Product {
    id          String  @id @default(cuid())
    title       String
    description String?
    price       Int     @default(0)

    demo_url   String?
    cover_url  String?
    contents   ProductContent[]
    categories String[]

    body     String?
    images   ProductImages? @relation(fields: [imagesId], references: [id])
    imagesId String?

    owner   User   @relation(fields: [ownerId], references: [id])
    ownerId String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    purchases PurchaseHistory[]
    feedbacks Feedback[]
}

model ProductContent {
    id       String @id @default(cuid())
    version  String
    code_url String

    product   Product @relation(fields: [productId], references: [id])
    productId String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@unique([productId, version])
}

model ProductImages {
    id         String   @id @default(cuid())
    images_url String[]

    products Product[]
}

model PurchaseHistory {
    id        String @id @default(cuid())
    orderId   String @unique
    status    String
    price     Int
    productId String
    userId    String

    product Product @relation(fields: [productId], references: [id])
    owner   User    @relation(fields: [userId], references: [id])

    created_at DateTime @default(now())
}

model Feedback {
    id           String  @id @default(cuid())
    productId    String
    reviewerId   String
    content      String
    isRecomended Boolean @default(true)

    product  Product @relation(fields: [productId], references: [id])
    reviewer User    @relation(fields: [reviewerId], references: [id])

    created_at DateTime @default(now())

    @@unique([productId, reviewerId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String               @id @default(cuid())
    name           String?
    email          String?              @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    products       Product[]
    purchases      PurchaseHistory[]
    feedbacks      Feedback[]
    requestThreads RequestThread[]
    requestReplies RequestThreadReply[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
